// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cards.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCard = `-- name: CreateCard :one
INSERT INTO cards (name, card_limit, due_date, user_id, family_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, name, card_limit, due_date, family_id, created_at, updated_at, deleted_at
`

type CreateCardParams struct {
	Name      string      `json:"name"`
	CardLimit float64     `json:"card_limit"`
	DueDate   int32       `json:"due_date"`
	UserID    int64       `json:"user_id"`
	FamilyID  pgtype.Int8 `json:"family_id"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRow(ctx, createCard,
		arg.Name,
		arg.CardLimit,
		arg.DueDate,
		arg.UserID,
		arg.FamilyID,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CardLimit,
		&i.DueDate,
		&i.FamilyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCard = `-- name: DeleteCard :exec
UPDATE cards
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteCard(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCard, id)
	return err
}

const getCardById = `-- name: GetCardById :one
SELECT id, user_id, name, card_limit, due_date, family_id, created_at, updated_at, deleted_at
FROM cards
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetCardById(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRow(ctx, getCardById, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CardLimit,
		&i.DueDate,
		&i.FamilyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT id, user_id, name, card_limit, due_date, family_id, created_at, updated_at, deleted_at
FROM cards
ORDER BY $1
LIMIT $2 OFFSET $3
`

type ListCardsParams struct {
	Column1 interface{} `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) ListCards(ctx context.Context, arg ListCardsParams) ([]Card, error) {
	rows, err := q.db.Query(ctx, listCards, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Card{}
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CardLimit,
			&i.DueDate,
			&i.FamilyID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCard = `-- name: UpdateCard :one
UPDATE cards
SET name = $2,
    card_limit = $3,
    due_date = $4,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, user_id, name, card_limit, due_date, family_id, created_at, updated_at, deleted_at
`

type UpdateCardParams struct {
	ID        int64   `json:"id"`
	Name      string  `json:"name"`
	CardLimit float64 `json:"card_limit"`
	DueDate   int32   `json:"due_date"`
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) (Card, error) {
	row := q.db.QueryRow(ctx, updateCard,
		arg.ID,
		arg.Name,
		arg.CardLimit,
		arg.DueDate,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CardLimit,
		&i.DueDate,
		&i.FamilyID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
