// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: entries.sql

package database

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (title, amount, account_id, installments, type, category_id, invoice_id, payday, paid_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, title, amount, account_id, installments, type, category_id, invoice_id, payday, paid_at, created_at, updated_at, deleted_at
`

type CreateEntryParams struct {
	Title        string        `json:"title"`
	Amount       float64       `json:"amount"`
	AccountID    sql.NullInt64 `json:"account_id"`
	Installments sql.NullInt32 `json:"installments"`
	Type         EntryType     `json:"type"`
	CategoryID   int64         `json:"category_id"`
	InvoiceID    sql.NullInt64 `json:"invoice_id"`
	Payday       sql.NullTime  `json:"payday"`
	PaidAt       sql.NullTime  `json:"paid_at"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.Title,
		arg.Amount,
		arg.AccountID,
		arg.Installments,
		arg.Type,
		arg.CategoryID,
		arg.InvoiceID,
		arg.Payday,
		arg.PaidAt,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Amount,
		&i.AccountID,
		&i.Installments,
		&i.Type,
		&i.CategoryID,
		&i.InvoiceID,
		&i.Payday,
		&i.PaidAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
UPDATE entries
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntryById = `-- name: GetEntryById :one
SELECT id, title, amount, account_id, installments, type, category_id, invoice_id, payday, paid_at, created_at, updated_at, deleted_at
FROM entries
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetEntryById(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryById, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Amount,
		&i.AccountID,
		&i.Installments,
		&i.Type,
		&i.CategoryID,
		&i.InvoiceID,
		&i.Payday,
		&i.PaidAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, title, amount, account_id, installments, type, category_id, invoice_id, payday, paid_at, created_at, updated_at, deleted_at
FROM entries
ORDER BY $1
LIMIT $2 OFFSET $3
`

type ListEntriesParams struct {
	Column1 interface{} `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Amount,
			&i.AccountID,
			&i.Installments,
			&i.Type,
			&i.CategoryID,
			&i.InvoiceID,
			&i.Payday,
			&i.PaidAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries
SET title = $2,
    amount = $3,
    category_id = $4,
    payday = $5,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, title, amount, account_id, installments, type, category_id, invoice_id, payday, paid_at, created_at, updated_at, deleted_at
`

type UpdateEntryParams struct {
	ID         int64        `json:"id"`
	Title      string       `json:"title"`
	Amount     float64      `json:"amount"`
	CategoryID int64        `json:"category_id"`
	Payday     sql.NullTime `json:"payday"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry,
		arg.ID,
		arg.Title,
		arg.Amount,
		arg.CategoryID,
		arg.Payday,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Amount,
		&i.AccountID,
		&i.Installments,
		&i.Type,
		&i.CategoryID,
		&i.InvoiceID,
		&i.Payday,
		&i.PaidAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePaidAt = `-- name: UpdatePaidAt :one
UPDATE entries
SET paid_at = $2,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, title, amount, account_id, installments, type, category_id, invoice_id, payday, paid_at, created_at, updated_at, deleted_at
`

type UpdatePaidAtParams struct {
	ID     int64        `json:"id"`
	PaidAt sql.NullTime `json:"paid_at"`
}

func (q *Queries) UpdatePaidAt(ctx context.Context, arg UpdatePaidAtParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updatePaidAt, arg.ID, arg.PaidAt)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Amount,
		&i.AccountID,
		&i.Installments,
		&i.Type,
		&i.CategoryID,
		&i.InvoiceID,
		&i.Payday,
		&i.PaidAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
