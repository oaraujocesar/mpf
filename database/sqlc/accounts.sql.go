// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: accounts.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (name, balance, user_id)
VALUES ($1, $2, $3)
RETURNING id, name, balance, user_id, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	Name    string  `json:"name"`
	Balance float64 `json:"balance"`
	UserID  int64   `json:"user_id"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.Balance, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, name, balance, user_id, created_at, updated_at, deleted_at
FROM accounts
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, balance, user_id, created_at, updated_at, deleted_at
FROM accounts
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Balance,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET name = $2,
    balance = $3,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, balance, user_id, created_at, updated_at, deleted_at
`

type UpdateAccountParams struct {
	ID      int64   `json:"id"`
	Name    string  `json:"name"`
	Balance float64 `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Name, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE accounts
SET balance = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, balance, user_id, created_at, updated_at, deleted_at
`

type UpdateBalanceParams struct {
	ID      int64   `json:"id"`
	Balance float64 `json:"balance"`
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
